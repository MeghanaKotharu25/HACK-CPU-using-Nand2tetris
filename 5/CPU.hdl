/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers (A and D) and a program counter (PC).
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this location.
 * If the current instruction needs to write a value to M,
 * the value is placed in outM, the address of the target 
 * location is placed in the addressM output, and the writeM
 * control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are
 * combinational: they are affected instantaneously by the 
 * execution of the current instruction. The addressM and pc 
 * outputs are clocked: although they are affected by the 
 * execution of the current instruction, they commit to their 
 * new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) 
 * rather than to the address resulting from executing the current 
 * instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoding
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // A Register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);
    Or(a=aInstruction, b=instruction[5], out=loadA);
    ARegister(in=aRegIn, load=loadA, out=aRegOut, out[0..14]=addressM);

    // D Register
    And(a=cInstruction, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegOut);

    // ALU
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluY);
    ALU(x=dRegOut, y=aluY, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM, 
        zr=zrOut, ng=ngOut);

    // WriteM
    And(a=cInstruction, b=instruction[3], out=writeM);

    // Jump logic
    Or(a=zrOut, b=ngOut, out=zrOrNg);
    Not(in=zrOrNg, out=psOut);
    And(a=instruction[2], b=ngOut, out=jlt);
    And(a=instruction[1], b=zrOut, out=jeq);
    And(a=instruction[0], b=psOut, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jump);
    And(a=cInstruction, b=jump, out=pcLoad);

    // Program Counter
    PC(in=aRegOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}